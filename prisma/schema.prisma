// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events    Event[]

  @@map("admins")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  maxGuests   Int      @default(100)
  tableSize   Int      @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guests      Guest[]
  tables      Table[]
  photos      Photo[]
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String

  @@map("events")
}

model Guest {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  rsvpStatus String @default("PENDING")
  mealChoice String?
  tableId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  table     Table?   @relation(fields: [tableId], references: [id])

  @@map("guests")
}

model Table {
  id        String   @id @default(cuid())
  number    Int
  capacity  Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  guests    Guest[]

  @@unique([eventId, number])
  @@map("tables")
}

model Photo {
  id        String   @id @default(cuid())
  filename  String
  url       String
  caption   String?
  createdAt DateTime @default(now())

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String

  @@map("photos")
}

// RsvpStatus enum values: PENDING, YES, NO, MAYBE